{"version":3,"sources":["components/graphTimeRangeSelector.js","App.js","serviceWorker.js","index.js"],"names":["GraphTimeRangeSelector","timeRanges","graphNDaysAgo","setGraphNDaysAgo","className","map","r","i","daysAgo","onClick","key","label","App","useState","graphData","setGraphData","tableData","setTableData","DESKTOP_SCREEN","window","innerWidth","twoweeksAgo","Date","graphStartDate","setGraphStartDate","useEffect","n","console","log","document","title","Papa","parse","download","header","dynamicTyping","complete","results","file","data","filter","row","date","cases","reverse","length","gdata","d","xydata","x","y","id","href","size","width","height","innerHeight","useMesh","tooltip","point","class","xFormatted","enableSlices","yScale","type","yFormat","xFormat","xScale","format","axisBottom","legend","legendOffset","tickValues","Math","floor","legendPosition","axisLeft","axisTop","axisRight","enablePoints","enableGridX","enableGridY","theme","textColor","margin","bottom","top","left","right","index","moment","color","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.efaa8236.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst GraphTimeRangeSelector = ({timeRanges, graphNDaysAgo, setGraphNDaysAgo}) => {\r\n\r\n    let sameStartDate = (d1,d2) => {\r\n        console.log(`comparing d1=${d1} == d2=${d2} `);\r\n        console.log(`comparing d1=${d1.getTime()} == d2=${d2.getTime()} `);\r\n        if (d1 && d2 && d1.getTime() == d2.getTime() ){\r\n            return 'selected';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    return (\r\n        <div className=\"time-range-button-container\">\r\n            {   \r\n                timeRanges.map((r,i) => (\r\n                    <div\r\n                        className={`time-range-button ${r.daysAgo == graphNDaysAgo ? 'selected':''}`}\r\n                        onClick={() => setGraphNDaysAgo(r.daysAgo)}\r\n                        key={i}>\r\n                        <p className=\"time-range-button\">{r.label}</p>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GraphTimeRangeSelector;","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Papa from 'papaparse';\r\nimport { Line } from '@nivo/line'\r\nimport moment from 'moment';\r\nimport GridLoader from 'react-spinners/GridLoader';\r\nimport { FaGithubSquare } from 'react-icons/fa'\r\nimport GraphTimeRangeSelector from './components/graphTimeRangeSelector';\r\n\r\nfunction App() {\r\n  const CSV_URL = 'https://gatech-covid-19-data.s3.amazonaws.com/gatech_covid_data.csv';\r\n\r\n  // Full data set\r\n  let [data, setData] = useState();\r\n\r\n  // Data to be shown on the graph\r\n  let [graphData, setGraphData] = useState();\r\n  let [tableData, setTableData] = useState();\r\n\r\n  let DESKTOP_SCREEN = window.innerWidth > 700;\r\n  \r\n  let ndaysAgo = (n) => {return new Date(new Date() - 1000 * 60*60*24*n)};\r\n  let twoweeksAgo = new Date(new Date() - 1000 * 60*60*24*31);\r\n  let [graphStartDate, setGraphStartDate] = useState(twoweeksAgo);\r\n  let [graphNDaysAgo,setGraphNDaysAgo] = useState(31);\r\n\r\n  useEffect(() => {\r\n    setGraphStartDate(ndaysAgo(graphNDaysAgo));\r\n  },[graphNDaysAgo])\r\n\r\n  let timeRanges = [\r\n    {\r\n      label: '1 year',\r\n      daysAgo: 365\r\n    },\r\n    {\r\n      label: '30 days',\r\n      daysAgo: 31\r\n    },\r\n    {\r\n      label: '14 days',\r\n      daysAgo: 15\r\n    }\r\n  ];\r\n\r\n  console.log(graphStartDate);\r\n\r\n  useEffect(() => {\r\n    document.title = \"GATech Covid-19 Chart\"\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    Papa.parse(CSV_URL,\r\n      {\r\n        download: true,\r\n        header: true,\r\n        dynamicTyping: true,\r\n        complete: (results, file) => {\r\n          // console.log(results);\r\n\r\n          // Filter for valid rows\r\n          let data = results.data.filter((row) =>\r\n            row.date && row.cases);\r\n          data = data.reverse();\r\n          console.log(`Found ${data.length} valid rows from ${data[0].date} to ${data[data.length - 1].date}`)\r\n\r\n          // Map to dates\r\n          data = data.map((row) => ({\r\n            date: new Date(row.date),\r\n            cases: row.cases,\r\n          }));\r\n\r\n          let gdata = data.filter((d) => d.date > graphStartDate);\r\n          console.log(`Showing ${gdata.length} days starting from ${graphStartDate}`)\r\n          console.log(gdata);\r\n          \r\n          // Map to xy\r\n          let xydata = gdata.map((row) => ({\r\n            x: row.date,\r\n            y: row.cases\r\n          }));\r\n          \r\n          setTableData(data.reverse());\r\n          setGraphData([{\r\n            id: 0,\r\n            data: [...xydata]\r\n          }]);\r\n          console.log(data);\r\n        }\r\n      })\r\n  }, [graphStartDate]);\r\n\r\n  const theme = {\r\n    textColor: '#ffffff',\r\n  };\r\n  //console.log('' + window.innerWidth + ' ' + window.innerHeight);\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {\r\n          graphData ?\r\n            <div>\r\n              <h1>Georgia Tech Daily Covid-19 Cases</h1>\r\n              <div className=\"fork-me\">\r\n                <a className=\"fork-me\" href=\"https://github.com/davidgamero/gatech-covid-chart\">Fork me on GitHub </a>\r\n                <FaGithubSquare size={25} />\r\n              </div>\r\n              <Line\r\n                data={graphData}\r\n\r\n                width={window.innerWidth * 0.8}\r\n                height={window.innerHeight * 0.6}\r\n\r\n                useMesh={window.innerWidth > 700}\r\n                tooltip={({ point }) => {\r\n                  // console.log(point)\r\n                  return <div>\r\n                    <h3 class=\"tooltip-row\">{point.data.xFormatted}</h3>\r\n                    <h3 class=\"tooltip-row\">{'' + point.data.y + 'cases'}</h3>\r\n                  </div>\r\n                }}\r\n                enableSlices={false}\r\n                yScale={{\r\n                  type: 'linear'\r\n                }}\r\n                yFormat={(row) => 'a'}\r\n                xFormat=\"time:%Y-%m-%d\"\r\n                xScale={{\r\n                  type: 'time',\r\n                  format: 'native',\r\n                }}\r\n                axisBottom={{\r\n                  legend: 'Date',\r\n                  legendOffset: 40,\r\n                  format: '%b %d',\r\n                  tickValues: Math.floor(window.innerWidth / 100),\r\n                  legendPosition: 'middle'\r\n                }}\r\n                axisLeft={{\r\n                  legend: 'Cases',\r\n                  legendOffset: -40,\r\n                  legendPosition: 'middle'\r\n                }}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                enablePoints={DESKTOP_SCREEN}\r\n                enableGridX={false}\r\n                enableGridY={false}\r\n                theme={theme}\r\n                margin={{\r\n                  bottom: 50,\r\n                  top: 50,\r\n                  left: 50,\r\n                  right: 50\r\n                }}\r\n              />\r\n              <div>\r\n                <GraphTimeRangeSelector\r\n                timeRanges={timeRanges}\r\n                setGraphNDaysAgo={setGraphNDaysAgo}\r\n                graphNDaysAgo={graphNDaysAgo}/>\r\n              </div>\r\n              <h3 className=\"table-title\">Data from\r\n                <a className=\"table-title\" href=\"https://github.com/davidgamero/gatech-covid-data-scraper\">gatech-covid-data-scraper</a>\r\n              </h3>\r\n              <table width={window.innerWidth * 0.8}\r\n                className=\"covid-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Date</th>\r\n                    <th>Cases</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {tableData.map((row, index) => {\r\n                    return <tr className=\"covid-table\" key={index}>\r\n                      <td className=\"covid-table\">{moment(row.date).format('MMM-DD-YYYY')}</td>\r\n                      <td className=\"covid-table\">{row.cases}</td>\r\n                    </tr>\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div> : <div>\r\n              <GridLoader size={15} color=\"rgb(232, 193, 160)\"></GridLoader>\r\n              <h3>Loading COVID Data...</h3>\r\n            </div>\r\n        }\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}